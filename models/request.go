// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Request request
//
// swagger:model Request
type Request struct {

	// path details
	PathDetails *RequestPathDetails `json:"pathDetails,omitempty"`

	// Policies to check the query with (if policies is provided under tokenDetails, then this can be empty)
	// Example: {"meetpaas/":["root-policy-a","root-policy-b","root-policy-c"],"meetpaas/mccdev":["policy-a","policy-b"]}
	Policies map[string][]string `json:"policies,omitempty"`

	// raw policy
	RawPolicy *RequestRawPolicy `json:"rawPolicy,omitempty"`

	// token details
	TokenDetails *RequestTokenDetails `json:"tokenDetails,omitempty"`
}

// Validate validates this request
func (m *Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePathDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Request) validatePathDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.PathDetails) { // not required
		return nil
	}

	if m.PathDetails != nil {
		if err := m.PathDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pathDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pathDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateRawPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.RawPolicy) { // not required
		return nil
	}

	if m.RawPolicy != nil {
		if err := m.RawPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rawPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rawPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *Request) validateTokenDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenDetails) { // not required
		return nil
	}

	if m.TokenDetails != nil {
		if err := m.TokenDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this request based on the context it is used
func (m *Request) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePathDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRawPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Request) contextValidatePathDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.PathDetails != nil {
		if err := m.PathDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pathDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pathDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateRawPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.RawPolicy != nil {
		if err := m.RawPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rawPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rawPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *Request) contextValidateTokenDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenDetails != nil {
		if err := m.TokenDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokenDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokenDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Request) UnmarshalBinary(b []byte) error {
	var res Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RequestPathDetails request path details
//
// swagger:model RequestPathDetails
type RequestPathDetails struct {

	// The namespace in which the path/query occurs
	// Example: meetpaas/mccdev
	Namespace string `json:"namespace,omitempty"`

	// The HTTP operation for the pqth
	// Example: create
	// Enum: [create read update patch delete list help alias-lookahead resolve-role revoke renew rollback]
	Op string `json:"op,omitempty"`

	// The vault path for the query
	// Example: secret/data/foo/bar
	Path string `json:"path,omitempty"`
}

// Validate validates this request path details
func (m *RequestPathDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestPathDetailsTypeOpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","read","update","patch","delete","list","help","alias-lookahead","resolve-role","revoke","renew","rollback"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestPathDetailsTypeOpPropEnum = append(requestPathDetailsTypeOpPropEnum, v)
	}
}

const (

	// RequestPathDetailsOpCreate captures enum value "create"
	RequestPathDetailsOpCreate string = "create"

	// RequestPathDetailsOpRead captures enum value "read"
	RequestPathDetailsOpRead string = "read"

	// RequestPathDetailsOpUpdate captures enum value "update"
	RequestPathDetailsOpUpdate string = "update"

	// RequestPathDetailsOpPatch captures enum value "patch"
	RequestPathDetailsOpPatch string = "patch"

	// RequestPathDetailsOpDelete captures enum value "delete"
	RequestPathDetailsOpDelete string = "delete"

	// RequestPathDetailsOpList captures enum value "list"
	RequestPathDetailsOpList string = "list"

	// RequestPathDetailsOpHelp captures enum value "help"
	RequestPathDetailsOpHelp string = "help"

	// RequestPathDetailsOpAliasDashLookahead captures enum value "alias-lookahead"
	RequestPathDetailsOpAliasDashLookahead string = "alias-lookahead"

	// RequestPathDetailsOpResolveDashRole captures enum value "resolve-role"
	RequestPathDetailsOpResolveDashRole string = "resolve-role"

	// RequestPathDetailsOpRevoke captures enum value "revoke"
	RequestPathDetailsOpRevoke string = "revoke"

	// RequestPathDetailsOpRenew captures enum value "renew"
	RequestPathDetailsOpRenew string = "renew"

	// RequestPathDetailsOpRollback captures enum value "rollback"
	RequestPathDetailsOpRollback string = "rollback"
)

// prop value enum
func (m *RequestPathDetails) validateOpEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestPathDetailsTypeOpPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestPathDetails) validateOp(formats strfmt.Registry) error {
	if swag.IsZero(m.Op) { // not required
		return nil
	}

	// value enum
	if err := m.validateOpEnum("pathDetails"+"."+"op", "body", m.Op); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request path details based on context it is used
func (m *RequestPathDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestPathDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestPathDetails) UnmarshalBinary(b []byte) error {
	var res RequestPathDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RequestRawPolicy pass in raw HCL or JSON policy to add to ACL
//
// swagger:model RequestRawPolicy
type RequestRawPolicy struct {

	// name of the policy (should be unique)
	// Required: true
	Name *string `json:"name"`

	// The namespace this policy should be in
	// Example: meetpaas/mccdev
	// Required: true
	Namespace *string `json:"namespace"`

	// Raw Policy
	// Required: true
	Policy *string `json:"policy"`
}

// Validate validates this request raw policy
func (m *RequestRawPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequestRawPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("rawPolicy"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RequestRawPolicy) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("rawPolicy"+"."+"namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *RequestRawPolicy) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("rawPolicy"+"."+"policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request raw policy based on context it is used
func (m *RequestRawPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestRawPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestRawPolicy) UnmarshalBinary(b []byte) error {
	var res RequestRawPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RequestTokenDetails request token details
//
// swagger:model RequestTokenDetails
type RequestTokenDetails struct {

	// external namespace policies
	ExternalNamespacePolicies map[string][]string `json:"externalNamespacePolicies,omitempty"`

	// identity policies
	IdentityPolicies []string `json:"identityPolicies"`

	// namespace path
	NamespacePath string `json:"namespacePath,omitempty"`

	// policies
	Policies []string `json:"policies"`
}

// Validate validates this request token details
func (m *RequestTokenDetails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this request token details based on context it is used
func (m *RequestTokenDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestTokenDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestTokenDetails) UnmarshalBinary(b []byte) error {
	var res RequestTokenDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
