// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Response response
//
// swagger:model Response
type Response struct {

	// whether the operation is allowed or not
	// Required: true
	Allowed *bool `json:"allowed"`

	// array of operations that is allowed (if allowed=true)
	// Example: ["read","create"]
	AllowedCap []string `json:"allowedCap"`

	// Policies that deny the operation (if allowed=false)
	// Example: {"meetpaas/":{"root-policy-a":[{"name":"\u003csegment-name\u003e","raw":"\u003c-raw-policy-segment\u003e"}]}}
	DenyingPolicySegments map[string]map[string][]PolicySegment `json:"denyingPolicySegments,omitempty"`

	// Policies that allow the operation (if allowed=true)
	// Example: {"meetpaas/":{"root-policy-a":[{"name":"\u003csegment-name\u003e","raw":"\u003c-raw-policy-segment\u003e"}]}}
	GrantingPolicySegments map[string]map[string][]PolicySegment `json:"grantingPolicySegments,omitempty"`

	// Human readable mesages from the server
	// Example: [{"msgBody":"Hello","msgType":"info"},{"msgBody":"World","msgType":"warn"}]
	Messages []*Message `json:"messages"`
}

// Validate validates this response
func (m *Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDenyingPolicySegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantingPolicySegments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Response) validateAllowed(formats strfmt.Registry) error {

	if err := validate.Required("allowed", "body", m.Allowed); err != nil {
		return err
	}

	return nil
}

func (m *Response) validateDenyingPolicySegments(formats strfmt.Registry) error {
	if swag.IsZero(m.DenyingPolicySegments) { // not required
		return nil
	}

	for k := range m.DenyingPolicySegments {

		for kk := range m.DenyingPolicySegments[k] {

			if err := validate.Required("denyingPolicySegments"+"."+k+"."+kk, "body", m.DenyingPolicySegments[k][kk]); err != nil {
				return err
			}

			for i := 0; i < len(m.DenyingPolicySegments[k][kk]); i++ {

				if err := m.DenyingPolicySegments[k][kk][i].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (m *Response) validateGrantingPolicySegments(formats strfmt.Registry) error {
	if swag.IsZero(m.GrantingPolicySegments) { // not required
		return nil
	}

	for k := range m.GrantingPolicySegments {

		for kk := range m.GrantingPolicySegments[k] {

			if err := validate.Required("grantingPolicySegments"+"."+k+"."+kk, "body", m.GrantingPolicySegments[k][kk]); err != nil {
				return err
			}

			for i := 0; i < len(m.GrantingPolicySegments[k][kk]); i++ {

				if err := m.GrantingPolicySegments[k][kk][i].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (m *Response) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this response based on the context it is used
func (m *Response) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDenyingPolicySegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGrantingPolicySegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Response) contextValidateDenyingPolicySegments(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.DenyingPolicySegments {

		for kk := range m.DenyingPolicySegments[k] {

			for i := 0; i < len(m.DenyingPolicySegments[k][kk]); i++ {

				if err := m.DenyingPolicySegments[k][kk][i].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (m *Response) contextValidateGrantingPolicySegments(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.GrantingPolicySegments {

		for kk := range m.GrantingPolicySegments[k] {

			for i := 0; i < len(m.GrantingPolicySegments[k][kk]); i++ {

				if err := m.GrantingPolicySegments[k][kk][i].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (m *Response) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {
			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Response) UnmarshalBinary(b []byte) error {
	var res Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
