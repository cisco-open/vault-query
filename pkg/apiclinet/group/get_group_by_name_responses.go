// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetGroupByNameReader is a Reader for the GetGroupByName structure.
type GetGroupByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGroupByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGroupByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGroupByNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGroupByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGroupByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGroupByNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGroupByNameOK creates a GetGroupByNameOK with default headers values
func NewGetGroupByNameOK() *GetGroupByNameOK {
	return &GetGroupByNameOK{}
}

/*
GetGroupByNameOK describes a response with status code 200, with default header values.

successful operation
*/
type GetGroupByNameOK struct {
	Payload interface{}
}

// IsSuccess returns true when this get group by name o k response has a 2xx status code
func (o *GetGroupByNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get group by name o k response has a 3xx status code
func (o *GetGroupByNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get group by name o k response has a 4xx status code
func (o *GetGroupByNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get group by name o k response has a 5xx status code
func (o *GetGroupByNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get group by name o k response a status code equal to that given
func (o *GetGroupByNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get group by name o k response
func (o *GetGroupByNameOK) Code() int {
	return 200
}

func (o *GetGroupByNameOK) Error() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameOK  %+v", 200, o.Payload)
}

func (o *GetGroupByNameOK) String() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameOK  %+v", 200, o.Payload)
}

func (o *GetGroupByNameOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetGroupByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupByNameBadRequest creates a GetGroupByNameBadRequest with default headers values
func NewGetGroupByNameBadRequest() *GetGroupByNameBadRequest {
	return &GetGroupByNameBadRequest{}
}

/*
GetGroupByNameBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetGroupByNameBadRequest struct {
	Payload *GetGroupByNameBadRequestBody
}

// IsSuccess returns true when this get group by name bad request response has a 2xx status code
func (o *GetGroupByNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get group by name bad request response has a 3xx status code
func (o *GetGroupByNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get group by name bad request response has a 4xx status code
func (o *GetGroupByNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get group by name bad request response has a 5xx status code
func (o *GetGroupByNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get group by name bad request response a status code equal to that given
func (o *GetGroupByNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get group by name bad request response
func (o *GetGroupByNameBadRequest) Code() int {
	return 400
}

func (o *GetGroupByNameBadRequest) Error() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameBadRequest  %+v", 400, o.Payload)
}

func (o *GetGroupByNameBadRequest) String() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameBadRequest  %+v", 400, o.Payload)
}

func (o *GetGroupByNameBadRequest) GetPayload() *GetGroupByNameBadRequestBody {
	return o.Payload
}

func (o *GetGroupByNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGroupByNameBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupByNameUnauthorized creates a GetGroupByNameUnauthorized with default headers values
func NewGetGroupByNameUnauthorized() *GetGroupByNameUnauthorized {
	return &GetGroupByNameUnauthorized{}
}

/*
GetGroupByNameUnauthorized describes a response with status code 401, with default header values.

Token accessor invalid/not enough permissions
*/
type GetGroupByNameUnauthorized struct {
	Payload *GetGroupByNameUnauthorizedBody
}

// IsSuccess returns true when this get group by name unauthorized response has a 2xx status code
func (o *GetGroupByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get group by name unauthorized response has a 3xx status code
func (o *GetGroupByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get group by name unauthorized response has a 4xx status code
func (o *GetGroupByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get group by name unauthorized response has a 5xx status code
func (o *GetGroupByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get group by name unauthorized response a status code equal to that given
func (o *GetGroupByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get group by name unauthorized response
func (o *GetGroupByNameUnauthorized) Code() int {
	return 401
}

func (o *GetGroupByNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGroupByNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGroupByNameUnauthorized) GetPayload() *GetGroupByNameUnauthorizedBody {
	return o.Payload
}

func (o *GetGroupByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGroupByNameUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupByNameNotFound creates a GetGroupByNameNotFound with default headers values
func NewGetGroupByNameNotFound() *GetGroupByNameNotFound {
	return &GetGroupByNameNotFound{}
}

/*
GetGroupByNameNotFound describes a response with status code 404, with default header values.

Group not found
*/
type GetGroupByNameNotFound struct {
	Payload *GetGroupByNameNotFoundBody
}

// IsSuccess returns true when this get group by name not found response has a 2xx status code
func (o *GetGroupByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get group by name not found response has a 3xx status code
func (o *GetGroupByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get group by name not found response has a 4xx status code
func (o *GetGroupByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get group by name not found response has a 5xx status code
func (o *GetGroupByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get group by name not found response a status code equal to that given
func (o *GetGroupByNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get group by name not found response
func (o *GetGroupByNameNotFound) Code() int {
	return 404
}

func (o *GetGroupByNameNotFound) Error() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameNotFound  %+v", 404, o.Payload)
}

func (o *GetGroupByNameNotFound) String() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameNotFound  %+v", 404, o.Payload)
}

func (o *GetGroupByNameNotFound) GetPayload() *GetGroupByNameNotFoundBody {
	return o.Payload
}

func (o *GetGroupByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGroupByNameNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGroupByNameInternalServerError creates a GetGroupByNameInternalServerError with default headers values
func NewGetGroupByNameInternalServerError() *GetGroupByNameInternalServerError {
	return &GetGroupByNameInternalServerError{}
}

/*
GetGroupByNameInternalServerError describes a response with status code 500, with default header values.

Internal error processing request
*/
type GetGroupByNameInternalServerError struct {
	Payload *GetGroupByNameInternalServerErrorBody
}

// IsSuccess returns true when this get group by name internal server error response has a 2xx status code
func (o *GetGroupByNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get group by name internal server error response has a 3xx status code
func (o *GetGroupByNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get group by name internal server error response has a 4xx status code
func (o *GetGroupByNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get group by name internal server error response has a 5xx status code
func (o *GetGroupByNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get group by name internal server error response a status code equal to that given
func (o *GetGroupByNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get group by name internal server error response
func (o *GetGroupByNameInternalServerError) Code() int {
	return 500
}

func (o *GetGroupByNameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGroupByNameInternalServerError) String() string {
	return fmt.Sprintf("[GET /group/fetch/{groupName}][%d] getGroupByNameInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGroupByNameInternalServerError) GetPayload() *GetGroupByNameInternalServerErrorBody {
	return o.Payload
}

func (o *GetGroupByNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGroupByNameInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetGroupByNameBadRequestBody get group by name bad request body
swagger:model GetGroupByNameBadRequestBody
*/
type GetGroupByNameBadRequestBody struct {

	// id
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get group by name bad request body
func (o *GetGroupByNameBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name bad request body based on context it is used
func (o *GetGroupByNameBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetGroupByNameInternalServerErrorBody get group by name internal server error body
swagger:model GetGroupByNameInternalServerErrorBody
*/
type GetGroupByNameInternalServerErrorBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get group by name internal server error body
func (o *GetGroupByNameInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name internal server error body based on context it is used
func (o *GetGroupByNameInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetGroupByNameNotFoundBody get group by name not found body
swagger:model GetGroupByNameNotFoundBody
*/
type GetGroupByNameNotFoundBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get group by name not found body
func (o *GetGroupByNameNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name not found body based on context it is used
func (o *GetGroupByNameNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetGroupByNameUnauthorizedBody get group by name unauthorized body
swagger:model GetGroupByNameUnauthorizedBody
*/
type GetGroupByNameUnauthorizedBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get group by name unauthorized body
func (o *GetGroupByNameUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name unauthorized body based on context it is used
func (o *GetGroupByNameUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
