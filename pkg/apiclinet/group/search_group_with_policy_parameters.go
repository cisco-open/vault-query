// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSearchGroupWithPolicyParams creates a new SearchGroupWithPolicyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchGroupWithPolicyParams() *SearchGroupWithPolicyParams {
	return &SearchGroupWithPolicyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchGroupWithPolicyParamsWithTimeout creates a new SearchGroupWithPolicyParams object
// with the ability to set a timeout on a request.
func NewSearchGroupWithPolicyParamsWithTimeout(timeout time.Duration) *SearchGroupWithPolicyParams {
	return &SearchGroupWithPolicyParams{
		timeout: timeout,
	}
}

// NewSearchGroupWithPolicyParamsWithContext creates a new SearchGroupWithPolicyParams object
// with the ability to set a context for a request.
func NewSearchGroupWithPolicyParamsWithContext(ctx context.Context) *SearchGroupWithPolicyParams {
	return &SearchGroupWithPolicyParams{
		Context: ctx,
	}
}

// NewSearchGroupWithPolicyParamsWithHTTPClient creates a new SearchGroupWithPolicyParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchGroupWithPolicyParamsWithHTTPClient(client *http.Client) *SearchGroupWithPolicyParams {
	return &SearchGroupWithPolicyParams{
		HTTPClient: client,
	}
}

/*
SearchGroupWithPolicyParams contains all the parameters to send to the API endpoint

	for the search group with policy operation.

	Typically these are written to a http.Request.
*/
type SearchGroupWithPolicyParams struct {

	/* Namespace.

	   Namespace of the policy
	*/
	Namespace string

	/* PolicyName.

	   Name of policy
	*/
	PolicyName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search group with policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchGroupWithPolicyParams) WithDefaults() *SearchGroupWithPolicyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search group with policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchGroupWithPolicyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search group with policy params
func (o *SearchGroupWithPolicyParams) WithTimeout(timeout time.Duration) *SearchGroupWithPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search group with policy params
func (o *SearchGroupWithPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search group with policy params
func (o *SearchGroupWithPolicyParams) WithContext(ctx context.Context) *SearchGroupWithPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search group with policy params
func (o *SearchGroupWithPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search group with policy params
func (o *SearchGroupWithPolicyParams) WithHTTPClient(client *http.Client) *SearchGroupWithPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search group with policy params
func (o *SearchGroupWithPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespace adds the namespace to the search group with policy params
func (o *SearchGroupWithPolicyParams) WithNamespace(namespace string) *SearchGroupWithPolicyParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the search group with policy params
func (o *SearchGroupWithPolicyParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPolicyName adds the policyName to the search group with policy params
func (o *SearchGroupWithPolicyParams) WithPolicyName(policyName string) *SearchGroupWithPolicyParams {
	o.SetPolicyName(policyName)
	return o
}

// SetPolicyName adds the policyName to the search group with policy params
func (o *SearchGroupWithPolicyParams) SetPolicyName(policyName string) {
	o.PolicyName = policyName
}

// WriteToRequest writes these params to a swagger request
func (o *SearchGroupWithPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param namespace
	qrNamespace := o.Namespace
	qNamespace := qrNamespace
	if qNamespace != "" {

		if err := r.SetQueryParam("namespace", qNamespace); err != nil {
			return err
		}
	}

	// query param policyName
	qrPolicyName := o.PolicyName
	qPolicyName := qrPolicyName
	if qPolicyName != "" {

		if err := r.SetQueryParam("policyName", qPolicyName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
