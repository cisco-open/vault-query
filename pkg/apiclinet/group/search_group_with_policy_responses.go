// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"vaultquery/models"
)

// SearchGroupWithPolicyReader is a Reader for the SearchGroupWithPolicy structure.
type SearchGroupWithPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchGroupWithPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchGroupWithPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchGroupWithPolicyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchGroupWithPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchGroupWithPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchGroupWithPolicyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchGroupWithPolicyOK creates a SearchGroupWithPolicyOK with default headers values
func NewSearchGroupWithPolicyOK() *SearchGroupWithPolicyOK {
	return &SearchGroupWithPolicyOK{}
}

/*
SearchGroupWithPolicyOK describes a response with status code 200, with default header values.

successful operation
*/
type SearchGroupWithPolicyOK struct {
	Payload *SearchGroupWithPolicyOKBody
}

// IsSuccess returns true when this search group with policy o k response has a 2xx status code
func (o *SearchGroupWithPolicyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search group with policy o k response has a 3xx status code
func (o *SearchGroupWithPolicyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search group with policy o k response has a 4xx status code
func (o *SearchGroupWithPolicyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search group with policy o k response has a 5xx status code
func (o *SearchGroupWithPolicyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search group with policy o k response a status code equal to that given
func (o *SearchGroupWithPolicyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search group with policy o k response
func (o *SearchGroupWithPolicyOK) Code() int {
	return 200
}

func (o *SearchGroupWithPolicyOK) Error() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyOK  %+v", 200, o.Payload)
}

func (o *SearchGroupWithPolicyOK) String() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyOK  %+v", 200, o.Payload)
}

func (o *SearchGroupWithPolicyOK) GetPayload() *SearchGroupWithPolicyOKBody {
	return o.Payload
}

func (o *SearchGroupWithPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchGroupWithPolicyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchGroupWithPolicyBadRequest creates a SearchGroupWithPolicyBadRequest with default headers values
func NewSearchGroupWithPolicyBadRequest() *SearchGroupWithPolicyBadRequest {
	return &SearchGroupWithPolicyBadRequest{}
}

/*
SearchGroupWithPolicyBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SearchGroupWithPolicyBadRequest struct {
	Payload *SearchGroupWithPolicyBadRequestBody
}

// IsSuccess returns true when this search group with policy bad request response has a 2xx status code
func (o *SearchGroupWithPolicyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search group with policy bad request response has a 3xx status code
func (o *SearchGroupWithPolicyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search group with policy bad request response has a 4xx status code
func (o *SearchGroupWithPolicyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search group with policy bad request response has a 5xx status code
func (o *SearchGroupWithPolicyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search group with policy bad request response a status code equal to that given
func (o *SearchGroupWithPolicyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search group with policy bad request response
func (o *SearchGroupWithPolicyBadRequest) Code() int {
	return 400
}

func (o *SearchGroupWithPolicyBadRequest) Error() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyBadRequest  %+v", 400, o.Payload)
}

func (o *SearchGroupWithPolicyBadRequest) String() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyBadRequest  %+v", 400, o.Payload)
}

func (o *SearchGroupWithPolicyBadRequest) GetPayload() *SearchGroupWithPolicyBadRequestBody {
	return o.Payload
}

func (o *SearchGroupWithPolicyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchGroupWithPolicyBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchGroupWithPolicyUnauthorized creates a SearchGroupWithPolicyUnauthorized with default headers values
func NewSearchGroupWithPolicyUnauthorized() *SearchGroupWithPolicyUnauthorized {
	return &SearchGroupWithPolicyUnauthorized{}
}

/*
SearchGroupWithPolicyUnauthorized describes a response with status code 401, with default header values.

Token accessor invalid/not enough permissions
*/
type SearchGroupWithPolicyUnauthorized struct {
	Payload *SearchGroupWithPolicyUnauthorizedBody
}

// IsSuccess returns true when this search group with policy unauthorized response has a 2xx status code
func (o *SearchGroupWithPolicyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search group with policy unauthorized response has a 3xx status code
func (o *SearchGroupWithPolicyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search group with policy unauthorized response has a 4xx status code
func (o *SearchGroupWithPolicyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search group with policy unauthorized response has a 5xx status code
func (o *SearchGroupWithPolicyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search group with policy unauthorized response a status code equal to that given
func (o *SearchGroupWithPolicyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the search group with policy unauthorized response
func (o *SearchGroupWithPolicyUnauthorized) Code() int {
	return 401
}

func (o *SearchGroupWithPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchGroupWithPolicyUnauthorized) String() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchGroupWithPolicyUnauthorized) GetPayload() *SearchGroupWithPolicyUnauthorizedBody {
	return o.Payload
}

func (o *SearchGroupWithPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchGroupWithPolicyUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchGroupWithPolicyNotFound creates a SearchGroupWithPolicyNotFound with default headers values
func NewSearchGroupWithPolicyNotFound() *SearchGroupWithPolicyNotFound {
	return &SearchGroupWithPolicyNotFound{}
}

/*
SearchGroupWithPolicyNotFound describes a response with status code 404, with default header values.

Policy not found
*/
type SearchGroupWithPolicyNotFound struct {
	Payload *SearchGroupWithPolicyNotFoundBody
}

// IsSuccess returns true when this search group with policy not found response has a 2xx status code
func (o *SearchGroupWithPolicyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search group with policy not found response has a 3xx status code
func (o *SearchGroupWithPolicyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search group with policy not found response has a 4xx status code
func (o *SearchGroupWithPolicyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search group with policy not found response has a 5xx status code
func (o *SearchGroupWithPolicyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search group with policy not found response a status code equal to that given
func (o *SearchGroupWithPolicyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search group with policy not found response
func (o *SearchGroupWithPolicyNotFound) Code() int {
	return 404
}

func (o *SearchGroupWithPolicyNotFound) Error() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyNotFound  %+v", 404, o.Payload)
}

func (o *SearchGroupWithPolicyNotFound) String() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyNotFound  %+v", 404, o.Payload)
}

func (o *SearchGroupWithPolicyNotFound) GetPayload() *SearchGroupWithPolicyNotFoundBody {
	return o.Payload
}

func (o *SearchGroupWithPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchGroupWithPolicyNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchGroupWithPolicyInternalServerError creates a SearchGroupWithPolicyInternalServerError with default headers values
func NewSearchGroupWithPolicyInternalServerError() *SearchGroupWithPolicyInternalServerError {
	return &SearchGroupWithPolicyInternalServerError{}
}

/*
SearchGroupWithPolicyInternalServerError describes a response with status code 500, with default header values.

Internal error processing request
*/
type SearchGroupWithPolicyInternalServerError struct {
	Payload *SearchGroupWithPolicyInternalServerErrorBody
}

// IsSuccess returns true when this search group with policy internal server error response has a 2xx status code
func (o *SearchGroupWithPolicyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search group with policy internal server error response has a 3xx status code
func (o *SearchGroupWithPolicyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search group with policy internal server error response has a 4xx status code
func (o *SearchGroupWithPolicyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search group with policy internal server error response has a 5xx status code
func (o *SearchGroupWithPolicyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search group with policy internal server error response a status code equal to that given
func (o *SearchGroupWithPolicyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search group with policy internal server error response
func (o *SearchGroupWithPolicyInternalServerError) Code() int {
	return 500
}

func (o *SearchGroupWithPolicyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchGroupWithPolicyInternalServerError) String() string {
	return fmt.Sprintf("[GET /group/search/policy][%d] searchGroupWithPolicyInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchGroupWithPolicyInternalServerError) GetPayload() *SearchGroupWithPolicyInternalServerErrorBody {
	return o.Payload
}

func (o *SearchGroupWithPolicyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchGroupWithPolicyInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SearchGroupWithPolicyBadRequestBody search group with policy bad request body
swagger:model SearchGroupWithPolicyBadRequestBody
*/
type SearchGroupWithPolicyBadRequestBody struct {

	// id
	ID string `json:"id,omitempty"`

	// Human readable messages from the server
	Messages []*models.Message `json:"messages"`
}

// Validate validates this search group with policy bad request body
func (o *SearchGroupWithPolicyBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchGroupWithPolicyBadRequestBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	for i := 0; i < len(o.Messages); i++ {
		if swag.IsZero(o.Messages[i]) { // not required
			continue
		}

		if o.Messages[i] != nil {
			if err := o.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchGroupWithPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchGroupWithPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search group with policy bad request body based on the context it is used
func (o *SearchGroupWithPolicyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchGroupWithPolicyBadRequestBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Messages); i++ {

		if o.Messages[i] != nil {
			if err := o.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchGroupWithPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchGroupWithPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchGroupWithPolicyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchGroupWithPolicyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SearchGroupWithPolicyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchGroupWithPolicyInternalServerErrorBody search group with policy internal server error body
swagger:model SearchGroupWithPolicyInternalServerErrorBody
*/
type SearchGroupWithPolicyInternalServerErrorBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this search group with policy internal server error body
func (o *SearchGroupWithPolicyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search group with policy internal server error body based on context it is used
func (o *SearchGroupWithPolicyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchGroupWithPolicyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchGroupWithPolicyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res SearchGroupWithPolicyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchGroupWithPolicyNotFoundBody search group with policy not found body
swagger:model SearchGroupWithPolicyNotFoundBody
*/
type SearchGroupWithPolicyNotFoundBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this search group with policy not found body
func (o *SearchGroupWithPolicyNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search group with policy not found body based on context it is used
func (o *SearchGroupWithPolicyNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchGroupWithPolicyNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchGroupWithPolicyNotFoundBody) UnmarshalBinary(b []byte) error {
	var res SearchGroupWithPolicyNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchGroupWithPolicyOKBody search group with policy o k body
swagger:model SearchGroupWithPolicyOKBody
*/
type SearchGroupWithPolicyOKBody struct {

	// Any additional groups that might be related (such as parent or member groups)
	AdditionalGroups map[string]interface{} `json:"additionalGroups,omitempty"`

	// The groups that have the policy
	Groups map[string]interface{} `json:"groups,omitempty"`

	// Human readable messages from the server
	Messages []*models.Message `json:"messages"`
}

// Validate validates this search group with policy o k body
func (o *SearchGroupWithPolicyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchGroupWithPolicyOKBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	for i := 0; i < len(o.Messages); i++ {
		if swag.IsZero(o.Messages[i]) { // not required
			continue
		}

		if o.Messages[i] != nil {
			if err := o.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchGroupWithPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchGroupWithPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search group with policy o k body based on the context it is used
func (o *SearchGroupWithPolicyOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchGroupWithPolicyOKBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Messages); i++ {

		if o.Messages[i] != nil {
			if err := o.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchGroupWithPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchGroupWithPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchGroupWithPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchGroupWithPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res SearchGroupWithPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchGroupWithPolicyUnauthorizedBody search group with policy unauthorized body
swagger:model SearchGroupWithPolicyUnauthorizedBody
*/
type SearchGroupWithPolicyUnauthorizedBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this search group with policy unauthorized body
func (o *SearchGroupWithPolicyUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search group with policy unauthorized body based on context it is used
func (o *SearchGroupWithPolicyUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchGroupWithPolicyUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchGroupWithPolicyUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchGroupWithPolicyUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
