// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetPolicyByName(params *GetPolicyByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyByNameOK, error)

	PolicyTree(params *PolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PolicyTreeOK, error)

	QueryPolicyAllowed(params *QueryPolicyAllowedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryPolicyAllowedOK, error)

	SearchPolicy(params *SearchPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetPolicyByName finds policy by name

Returns a policy string
*/
func (a *Client) GetPolicyByName(params *GetPolicyByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPolicyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyByName",
		Method:             "GET",
		PathPattern:        "/policy/fetch/{policyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PolicyTree generates a tree using policies
*/
func (a *Client) PolicyTree(params *PolicyTreeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PolicyTreeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "policyTree",
		Method:             "POST",
		PathPattern:        "/policy/tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyTreeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyTreeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policyTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QueryPolicyAllowed queries if a path is allowed
*/
func (a *Client) QueryPolicyAllowed(params *QueryPolicyAllowedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*QueryPolicyAllowedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryPolicyAllowedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "queryPolicyAllowed",
		Method:             "POST",
		PathPattern:        "/policy/query/allowed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryPolicyAllowedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryPolicyAllowedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for queryPolicyAllowed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPolicy searches which policy allow an operation on a vault path
*/
func (a *Client) SearchPolicy(params *SearchPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchPolicy",
		Method:             "POST",
		PathPattern:        "/policy/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
