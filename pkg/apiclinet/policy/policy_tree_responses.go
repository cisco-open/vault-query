// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"vaultquery/models"
)

// PolicyTreeReader is a Reader for the PolicyTree structure.
type PolicyTreeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PolicyTreeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPolicyTreeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPolicyTreeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPolicyTreeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPolicyTreeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPolicyTreeOK creates a PolicyTreeOK with default headers values
func NewPolicyTreeOK() *PolicyTreeOK {
	return &PolicyTreeOK{}
}

/*
PolicyTreeOK describes a response with status code 200, with default header values.

successful operation
*/
type PolicyTreeOK struct {
	Payload *PolicyTreeOKBody
}

// IsSuccess returns true when this policy tree o k response has a 2xx status code
func (o *PolicyTreeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this policy tree o k response has a 3xx status code
func (o *PolicyTreeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy tree o k response has a 4xx status code
func (o *PolicyTreeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this policy tree o k response has a 5xx status code
func (o *PolicyTreeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this policy tree o k response a status code equal to that given
func (o *PolicyTreeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the policy tree o k response
func (o *PolicyTreeOK) Code() int {
	return 200
}

func (o *PolicyTreeOK) Error() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeOK  %+v", 200, o.Payload)
}

func (o *PolicyTreeOK) String() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeOK  %+v", 200, o.Payload)
}

func (o *PolicyTreeOK) GetPayload() *PolicyTreeOKBody {
	return o.Payload
}

func (o *PolicyTreeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PolicyTreeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyTreeBadRequest creates a PolicyTreeBadRequest with default headers values
func NewPolicyTreeBadRequest() *PolicyTreeBadRequest {
	return &PolicyTreeBadRequest{}
}

/*
PolicyTreeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PolicyTreeBadRequest struct {
	Payload *PolicyTreeBadRequestBody
}

// IsSuccess returns true when this policy tree bad request response has a 2xx status code
func (o *PolicyTreeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy tree bad request response has a 3xx status code
func (o *PolicyTreeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy tree bad request response has a 4xx status code
func (o *PolicyTreeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy tree bad request response has a 5xx status code
func (o *PolicyTreeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this policy tree bad request response a status code equal to that given
func (o *PolicyTreeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the policy tree bad request response
func (o *PolicyTreeBadRequest) Code() int {
	return 400
}

func (o *PolicyTreeBadRequest) Error() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeBadRequest  %+v", 400, o.Payload)
}

func (o *PolicyTreeBadRequest) String() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeBadRequest  %+v", 400, o.Payload)
}

func (o *PolicyTreeBadRequest) GetPayload() *PolicyTreeBadRequestBody {
	return o.Payload
}

func (o *PolicyTreeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PolicyTreeBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyTreeUnauthorized creates a PolicyTreeUnauthorized with default headers values
func NewPolicyTreeUnauthorized() *PolicyTreeUnauthorized {
	return &PolicyTreeUnauthorized{}
}

/*
PolicyTreeUnauthorized describes a response with status code 401, with default header values.

Token accessor invalid/not enough permissions
*/
type PolicyTreeUnauthorized struct {
	Payload *PolicyTreeUnauthorizedBody
}

// IsSuccess returns true when this policy tree unauthorized response has a 2xx status code
func (o *PolicyTreeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy tree unauthorized response has a 3xx status code
func (o *PolicyTreeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy tree unauthorized response has a 4xx status code
func (o *PolicyTreeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy tree unauthorized response has a 5xx status code
func (o *PolicyTreeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this policy tree unauthorized response a status code equal to that given
func (o *PolicyTreeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the policy tree unauthorized response
func (o *PolicyTreeUnauthorized) Code() int {
	return 401
}

func (o *PolicyTreeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeUnauthorized  %+v", 401, o.Payload)
}

func (o *PolicyTreeUnauthorized) String() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeUnauthorized  %+v", 401, o.Payload)
}

func (o *PolicyTreeUnauthorized) GetPayload() *PolicyTreeUnauthorizedBody {
	return o.Payload
}

func (o *PolicyTreeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PolicyTreeUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyTreeInternalServerError creates a PolicyTreeInternalServerError with default headers values
func NewPolicyTreeInternalServerError() *PolicyTreeInternalServerError {
	return &PolicyTreeInternalServerError{}
}

/*
PolicyTreeInternalServerError describes a response with status code 500, with default header values.

Internal error processing request
*/
type PolicyTreeInternalServerError struct {
	Payload *PolicyTreeInternalServerErrorBody
}

// IsSuccess returns true when this policy tree internal server error response has a 2xx status code
func (o *PolicyTreeInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy tree internal server error response has a 3xx status code
func (o *PolicyTreeInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy tree internal server error response has a 4xx status code
func (o *PolicyTreeInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this policy tree internal server error response has a 5xx status code
func (o *PolicyTreeInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this policy tree internal server error response a status code equal to that given
func (o *PolicyTreeInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the policy tree internal server error response
func (o *PolicyTreeInternalServerError) Code() int {
	return 500
}

func (o *PolicyTreeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeInternalServerError  %+v", 500, o.Payload)
}

func (o *PolicyTreeInternalServerError) String() string {
	return fmt.Sprintf("[POST /policy/tree][%d] policyTreeInternalServerError  %+v", 500, o.Payload)
}

func (o *PolicyTreeInternalServerError) GetPayload() *PolicyTreeInternalServerErrorBody {
	return o.Payload
}

func (o *PolicyTreeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PolicyTreeInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PolicyTreeBadRequestBody policy tree bad request body
swagger:model PolicyTreeBadRequestBody
*/
type PolicyTreeBadRequestBody struct {

	// id
	ID string `json:"id,omitempty"`

	// Human readable messages from the server
	Messages []*models.Message `json:"messages"`
}

// Validate validates this policy tree bad request body
func (o *PolicyTreeBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PolicyTreeBadRequestBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	for i := 0; i < len(o.Messages); i++ {
		if swag.IsZero(o.Messages[i]) { // not required
			continue
		}

		if o.Messages[i] != nil {
			if err := o.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyTreeBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyTreeBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy tree bad request body based on the context it is used
func (o *PolicyTreeBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PolicyTreeBadRequestBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Messages); i++ {

		if o.Messages[i] != nil {
			if err := o.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyTreeBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyTreeBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PolicyTreeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PolicyTreeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PolicyTreeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PolicyTreeInternalServerErrorBody policy tree internal server error body
swagger:model PolicyTreeInternalServerErrorBody
*/
type PolicyTreeInternalServerErrorBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this policy tree internal server error body
func (o *PolicyTreeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this policy tree internal server error body based on context it is used
func (o *PolicyTreeInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PolicyTreeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PolicyTreeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PolicyTreeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PolicyTreeOKBody policy tree o k body
swagger:model PolicyTreeOKBody
*/
type PolicyTreeOKBody struct {

	// Human readable messages from the server
	Messages []*models.Message `json:"messages"`

	// tree
	Tree interface{} `json:"tree,omitempty"`
}

// Validate validates this policy tree o k body
func (o *PolicyTreeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PolicyTreeOKBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	for i := 0; i < len(o.Messages); i++ {
		if swag.IsZero(o.Messages[i]) { // not required
			continue
		}

		if o.Messages[i] != nil {
			if err := o.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyTreeOK" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyTreeOK" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy tree o k body based on the context it is used
func (o *PolicyTreeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PolicyTreeOKBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Messages); i++ {

		if o.Messages[i] != nil {
			if err := o.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyTreeOK" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyTreeOK" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PolicyTreeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PolicyTreeOKBody) UnmarshalBinary(b []byte) error {
	var res PolicyTreeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
PolicyTreeUnauthorizedBody policy tree unauthorized body
swagger:model PolicyTreeUnauthorizedBody
*/
type PolicyTreeUnauthorizedBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this policy tree unauthorized body
func (o *PolicyTreeUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this policy tree unauthorized body based on context it is used
func (o *PolicyTreeUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PolicyTreeUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PolicyTreeUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PolicyTreeUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
