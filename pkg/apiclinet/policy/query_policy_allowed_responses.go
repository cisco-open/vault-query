// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"vaultquery/models"
)

// QueryPolicyAllowedReader is a Reader for the QueryPolicyAllowed structure.
type QueryPolicyAllowedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryPolicyAllowedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryPolicyAllowedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryPolicyAllowedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewQueryPolicyAllowedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryPolicyAllowedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryPolicyAllowedOK creates a QueryPolicyAllowedOK with default headers values
func NewQueryPolicyAllowedOK() *QueryPolicyAllowedOK {
	return &QueryPolicyAllowedOK{}
}

/*
QueryPolicyAllowedOK describes a response with status code 200, with default header values.

Successful query
*/
type QueryPolicyAllowedOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this query policy allowed o k response has a 2xx status code
func (o *QueryPolicyAllowedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this query policy allowed o k response has a 3xx status code
func (o *QueryPolicyAllowedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query policy allowed o k response has a 4xx status code
func (o *QueryPolicyAllowedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this query policy allowed o k response has a 5xx status code
func (o *QueryPolicyAllowedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this query policy allowed o k response a status code equal to that given
func (o *QueryPolicyAllowedOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the query policy allowed o k response
func (o *QueryPolicyAllowedOK) Code() int {
	return 200
}

func (o *QueryPolicyAllowedOK) Error() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedOK  %+v", 200, o.Payload)
}

func (o *QueryPolicyAllowedOK) String() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedOK  %+v", 200, o.Payload)
}

func (o *QueryPolicyAllowedOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *QueryPolicyAllowedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPolicyAllowedBadRequest creates a QueryPolicyAllowedBadRequest with default headers values
func NewQueryPolicyAllowedBadRequest() *QueryPolicyAllowedBadRequest {
	return &QueryPolicyAllowedBadRequest{}
}

/*
QueryPolicyAllowedBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type QueryPolicyAllowedBadRequest struct {
	Payload *QueryPolicyAllowedBadRequestBody
}

// IsSuccess returns true when this query policy allowed bad request response has a 2xx status code
func (o *QueryPolicyAllowedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query policy allowed bad request response has a 3xx status code
func (o *QueryPolicyAllowedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query policy allowed bad request response has a 4xx status code
func (o *QueryPolicyAllowedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this query policy allowed bad request response has a 5xx status code
func (o *QueryPolicyAllowedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this query policy allowed bad request response a status code equal to that given
func (o *QueryPolicyAllowedBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the query policy allowed bad request response
func (o *QueryPolicyAllowedBadRequest) Code() int {
	return 400
}

func (o *QueryPolicyAllowedBadRequest) Error() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedBadRequest  %+v", 400, o.Payload)
}

func (o *QueryPolicyAllowedBadRequest) String() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedBadRequest  %+v", 400, o.Payload)
}

func (o *QueryPolicyAllowedBadRequest) GetPayload() *QueryPolicyAllowedBadRequestBody {
	return o.Payload
}

func (o *QueryPolicyAllowedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryPolicyAllowedBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPolicyAllowedUnauthorized creates a QueryPolicyAllowedUnauthorized with default headers values
func NewQueryPolicyAllowedUnauthorized() *QueryPolicyAllowedUnauthorized {
	return &QueryPolicyAllowedUnauthorized{}
}

/*
QueryPolicyAllowedUnauthorized describes a response with status code 401, with default header values.

Token accessor invalid/not enough permissions
*/
type QueryPolicyAllowedUnauthorized struct {
	Payload *QueryPolicyAllowedUnauthorizedBody
}

// IsSuccess returns true when this query policy allowed unauthorized response has a 2xx status code
func (o *QueryPolicyAllowedUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query policy allowed unauthorized response has a 3xx status code
func (o *QueryPolicyAllowedUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query policy allowed unauthorized response has a 4xx status code
func (o *QueryPolicyAllowedUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this query policy allowed unauthorized response has a 5xx status code
func (o *QueryPolicyAllowedUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this query policy allowed unauthorized response a status code equal to that given
func (o *QueryPolicyAllowedUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the query policy allowed unauthorized response
func (o *QueryPolicyAllowedUnauthorized) Code() int {
	return 401
}

func (o *QueryPolicyAllowedUnauthorized) Error() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedUnauthorized  %+v", 401, o.Payload)
}

func (o *QueryPolicyAllowedUnauthorized) String() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedUnauthorized  %+v", 401, o.Payload)
}

func (o *QueryPolicyAllowedUnauthorized) GetPayload() *QueryPolicyAllowedUnauthorizedBody {
	return o.Payload
}

func (o *QueryPolicyAllowedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryPolicyAllowedUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryPolicyAllowedInternalServerError creates a QueryPolicyAllowedInternalServerError with default headers values
func NewQueryPolicyAllowedInternalServerError() *QueryPolicyAllowedInternalServerError {
	return &QueryPolicyAllowedInternalServerError{}
}

/*
QueryPolicyAllowedInternalServerError describes a response with status code 500, with default header values.

Internal error processing request
*/
type QueryPolicyAllowedInternalServerError struct {
	Payload *QueryPolicyAllowedInternalServerErrorBody
}

// IsSuccess returns true when this query policy allowed internal server error response has a 2xx status code
func (o *QueryPolicyAllowedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this query policy allowed internal server error response has a 3xx status code
func (o *QueryPolicyAllowedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this query policy allowed internal server error response has a 4xx status code
func (o *QueryPolicyAllowedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this query policy allowed internal server error response has a 5xx status code
func (o *QueryPolicyAllowedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this query policy allowed internal server error response a status code equal to that given
func (o *QueryPolicyAllowedInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the query policy allowed internal server error response
func (o *QueryPolicyAllowedInternalServerError) Code() int {
	return 500
}

func (o *QueryPolicyAllowedInternalServerError) Error() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryPolicyAllowedInternalServerError) String() string {
	return fmt.Sprintf("[POST /policy/query/allowed][%d] queryPolicyAllowedInternalServerError  %+v", 500, o.Payload)
}

func (o *QueryPolicyAllowedInternalServerError) GetPayload() *QueryPolicyAllowedInternalServerErrorBody {
	return o.Payload
}

func (o *QueryPolicyAllowedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(QueryPolicyAllowedInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
QueryPolicyAllowedBadRequestBody query policy allowed bad request body
swagger:model QueryPolicyAllowedBadRequestBody
*/
type QueryPolicyAllowedBadRequestBody struct {

	// id
	ID string `json:"id,omitempty"`

	// Human readable messages from the server
	Messages []*models.Message `json:"messages"`
}

// Validate validates this query policy allowed bad request body
func (o *QueryPolicyAllowedBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryPolicyAllowedBadRequestBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	for i := 0; i < len(o.Messages); i++ {
		if swag.IsZero(o.Messages[i]) { // not required
			continue
		}

		if o.Messages[i] != nil {
			if err := o.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryPolicyAllowedBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryPolicyAllowedBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query policy allowed bad request body based on the context it is used
func (o *QueryPolicyAllowedBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *QueryPolicyAllowedBadRequestBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Messages); i++ {

		if o.Messages[i] != nil {
			if err := o.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryPolicyAllowedBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryPolicyAllowedBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *QueryPolicyAllowedBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryPolicyAllowedBadRequestBody) UnmarshalBinary(b []byte) error {
	var res QueryPolicyAllowedBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryPolicyAllowedInternalServerErrorBody query policy allowed internal server error body
swagger:model QueryPolicyAllowedInternalServerErrorBody
*/
type QueryPolicyAllowedInternalServerErrorBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this query policy allowed internal server error body
func (o *QueryPolicyAllowedInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query policy allowed internal server error body based on context it is used
func (o *QueryPolicyAllowedInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryPolicyAllowedInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryPolicyAllowedInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res QueryPolicyAllowedInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
QueryPolicyAllowedUnauthorizedBody query policy allowed unauthorized body
swagger:model QueryPolicyAllowedUnauthorizedBody
*/
type QueryPolicyAllowedUnauthorizedBody struct {

	// id
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this query policy allowed unauthorized body
func (o *QueryPolicyAllowedUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query policy allowed unauthorized body based on context it is used
func (o *QueryPolicyAllowedUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *QueryPolicyAllowedUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *QueryPolicyAllowedUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res QueryPolicyAllowedUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
