// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewSearchAuthWithPolicyParams creates a new SearchAuthWithPolicyParams object
//
// There are no default values defined in the spec.
func NewSearchAuthWithPolicyParams() SearchAuthWithPolicyParams {

	return SearchAuthWithPolicyParams{}
}

// SearchAuthWithPolicyParams contains all the bound params for the search auth with policy operation
// typically these are obtained from a http.Request
//
// swagger:parameters searchAuthWithPolicy
type SearchAuthWithPolicyParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Namespace of the policy
	  Required: true
	  In: query
	*/
	Namespace string
	/*Name of policy
	  Required: true
	  In: query
	*/
	PolicyName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSearchAuthWithPolicyParams() beforehand.
func (o *SearchAuthWithPolicyParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	qPolicyName, qhkPolicyName, _ := qs.GetOK("policyName")
	if err := o.bindPolicyName(qPolicyName, qhkPolicyName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *SearchAuthWithPolicyParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("namespace", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("namespace", "query", raw); err != nil {
		return err
	}
	o.Namespace = raw

	return nil
}

// bindPolicyName binds and validates parameter PolicyName from query.
func (o *SearchAuthWithPolicyParams) bindPolicyName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("policyName", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("policyName", "query", raw); err != nil {
		return err
	}
	o.PolicyName = raw

	return nil
}
