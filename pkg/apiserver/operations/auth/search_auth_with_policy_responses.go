// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// SearchAuthWithPolicyOKCode is the HTTP code returned for type SearchAuthWithPolicyOK
const SearchAuthWithPolicyOKCode int = 200

/*
SearchAuthWithPolicyOK successful operation

swagger:response searchAuthWithPolicyOK
*/
type SearchAuthWithPolicyOK struct {

	/*
	  In: Body
	*/
	Payload *SearchAuthWithPolicyOKBody `json:"body,omitempty"`
}

// NewSearchAuthWithPolicyOK creates SearchAuthWithPolicyOK with default headers values
func NewSearchAuthWithPolicyOK() *SearchAuthWithPolicyOK {

	return &SearchAuthWithPolicyOK{}
}

// WithPayload adds the payload to the search auth with policy o k response
func (o *SearchAuthWithPolicyOK) WithPayload(payload *SearchAuthWithPolicyOKBody) *SearchAuthWithPolicyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search auth with policy o k response
func (o *SearchAuthWithPolicyOK) SetPayload(payload *SearchAuthWithPolicyOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchAuthWithPolicyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchAuthWithPolicyBadRequestCode is the HTTP code returned for type SearchAuthWithPolicyBadRequest
const SearchAuthWithPolicyBadRequestCode int = 400

/*
SearchAuthWithPolicyBadRequest Bad request

swagger:response searchAuthWithPolicyBadRequest
*/
type SearchAuthWithPolicyBadRequest struct {

	/*
	  In: Body
	*/
	Payload *SearchAuthWithPolicyBadRequestBody `json:"body,omitempty"`
}

// NewSearchAuthWithPolicyBadRequest creates SearchAuthWithPolicyBadRequest with default headers values
func NewSearchAuthWithPolicyBadRequest() *SearchAuthWithPolicyBadRequest {

	return &SearchAuthWithPolicyBadRequest{}
}

// WithPayload adds the payload to the search auth with policy bad request response
func (o *SearchAuthWithPolicyBadRequest) WithPayload(payload *SearchAuthWithPolicyBadRequestBody) *SearchAuthWithPolicyBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search auth with policy bad request response
func (o *SearchAuthWithPolicyBadRequest) SetPayload(payload *SearchAuthWithPolicyBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchAuthWithPolicyBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchAuthWithPolicyUnauthorizedCode is the HTTP code returned for type SearchAuthWithPolicyUnauthorized
const SearchAuthWithPolicyUnauthorizedCode int = 401

/*
SearchAuthWithPolicyUnauthorized Token accessor invalid/not enough permissions

swagger:response searchAuthWithPolicyUnauthorized
*/
type SearchAuthWithPolicyUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *SearchAuthWithPolicyUnauthorizedBody `json:"body,omitempty"`
}

// NewSearchAuthWithPolicyUnauthorized creates SearchAuthWithPolicyUnauthorized with default headers values
func NewSearchAuthWithPolicyUnauthorized() *SearchAuthWithPolicyUnauthorized {

	return &SearchAuthWithPolicyUnauthorized{}
}

// WithPayload adds the payload to the search auth with policy unauthorized response
func (o *SearchAuthWithPolicyUnauthorized) WithPayload(payload *SearchAuthWithPolicyUnauthorizedBody) *SearchAuthWithPolicyUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search auth with policy unauthorized response
func (o *SearchAuthWithPolicyUnauthorized) SetPayload(payload *SearchAuthWithPolicyUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchAuthWithPolicyUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchAuthWithPolicyNotFoundCode is the HTTP code returned for type SearchAuthWithPolicyNotFound
const SearchAuthWithPolicyNotFoundCode int = 404

/*
SearchAuthWithPolicyNotFound Policy not found

swagger:response searchAuthWithPolicyNotFound
*/
type SearchAuthWithPolicyNotFound struct {

	/*
	  In: Body
	*/
	Payload *SearchAuthWithPolicyNotFoundBody `json:"body,omitempty"`
}

// NewSearchAuthWithPolicyNotFound creates SearchAuthWithPolicyNotFound with default headers values
func NewSearchAuthWithPolicyNotFound() *SearchAuthWithPolicyNotFound {

	return &SearchAuthWithPolicyNotFound{}
}

// WithPayload adds the payload to the search auth with policy not found response
func (o *SearchAuthWithPolicyNotFound) WithPayload(payload *SearchAuthWithPolicyNotFoundBody) *SearchAuthWithPolicyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search auth with policy not found response
func (o *SearchAuthWithPolicyNotFound) SetPayload(payload *SearchAuthWithPolicyNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchAuthWithPolicyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SearchAuthWithPolicyInternalServerErrorCode is the HTTP code returned for type SearchAuthWithPolicyInternalServerError
const SearchAuthWithPolicyInternalServerErrorCode int = 500

/*
SearchAuthWithPolicyInternalServerError Internal error processing request

swagger:response searchAuthWithPolicyInternalServerError
*/
type SearchAuthWithPolicyInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *SearchAuthWithPolicyInternalServerErrorBody `json:"body,omitempty"`
}

// NewSearchAuthWithPolicyInternalServerError creates SearchAuthWithPolicyInternalServerError with default headers values
func NewSearchAuthWithPolicyInternalServerError() *SearchAuthWithPolicyInternalServerError {

	return &SearchAuthWithPolicyInternalServerError{}
}

// WithPayload adds the payload to the search auth with policy internal server error response
func (o *SearchAuthWithPolicyInternalServerError) WithPayload(payload *SearchAuthWithPolicyInternalServerErrorBody) *SearchAuthWithPolicyInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the search auth with policy internal server error response
func (o *SearchAuthWithPolicyInternalServerError) SetPayload(payload *SearchAuthWithPolicyInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SearchAuthWithPolicyInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
