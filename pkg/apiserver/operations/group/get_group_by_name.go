// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetGroupByNameHandlerFunc turns a function with the right signature into a get group by name handler
type GetGroupByNameHandlerFunc func(GetGroupByNameParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGroupByNameHandlerFunc) Handle(params GetGroupByNameParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetGroupByNameHandler interface for that can handle valid get group by name params
type GetGroupByNameHandler interface {
	Handle(GetGroupByNameParams, interface{}) middleware.Responder
}

// NewGetGroupByName creates a new http.Handler for the get group by name operation
func NewGetGroupByName(ctx *middleware.Context, handler GetGroupByNameHandler) *GetGroupByName {
	return &GetGroupByName{Context: ctx, Handler: handler}
}

/*
	GetGroupByName swagger:route GET /group/fetch/{groupName} group getGroupByName

# Find group by name

Returns a group
*/
type GetGroupByName struct {
	Context *middleware.Context
	Handler GetGroupByNameHandler
}

func (o *GetGroupByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetGroupByNameParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetGroupByNameBadRequestBody get group by name bad request body
//
// swagger:model GetGroupByNameBadRequestBody
type GetGroupByNameBadRequestBody struct {

	// id
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get group by name bad request body
func (o *GetGroupByNameBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name bad request body based on context it is used
func (o *GetGroupByNameBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetGroupByNameInternalServerErrorBody get group by name internal server error body
//
// swagger:model GetGroupByNameInternalServerErrorBody
type GetGroupByNameInternalServerErrorBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get group by name internal server error body
func (o *GetGroupByNameInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name internal server error body based on context it is used
func (o *GetGroupByNameInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetGroupByNameNotFoundBody get group by name not found body
//
// swagger:model GetGroupByNameNotFoundBody
type GetGroupByNameNotFoundBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get group by name not found body
func (o *GetGroupByNameNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name not found body based on context it is used
func (o *GetGroupByNameNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetGroupByNameUnauthorizedBody get group by name unauthorized body
//
// swagger:model GetGroupByNameUnauthorizedBody
type GetGroupByNameUnauthorizedBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this get group by name unauthorized body
func (o *GetGroupByNameUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get group by name unauthorized body based on context it is used
func (o *GetGroupByNameUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetGroupByNameUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGroupByNameUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetGroupByNameUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
