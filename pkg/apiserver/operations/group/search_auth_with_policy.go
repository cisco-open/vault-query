// Code generated by go-swagger; DO NOT EDIT.

package group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SearchAuthWithPolicyHandlerFunc turns a function with the right signature into a search auth with policy handler
type SearchAuthWithPolicyHandlerFunc func(SearchAuthWithPolicyParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchAuthWithPolicyHandlerFunc) Handle(params SearchAuthWithPolicyParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SearchAuthWithPolicyHandler interface for that can handle valid search auth with policy params
type SearchAuthWithPolicyHandler interface {
	Handle(SearchAuthWithPolicyParams, interface{}) middleware.Responder
}

// NewSearchAuthWithPolicy creates a new http.Handler for the search auth with policy operation
func NewSearchAuthWithPolicy(ctx *middleware.Context, handler SearchAuthWithPolicyHandler) *SearchAuthWithPolicy {
	return &SearchAuthWithPolicy{Context: ctx, Handler: handler}
}

/*
	SearchAuthWithPolicy swagger:route GET /auth/search/policy group searchAuthWithPolicy

Search which auth roles have a policy
*/
type SearchAuthWithPolicy struct {
	Context *middleware.Context
	Handler SearchAuthWithPolicyHandler
}

func (o *SearchAuthWithPolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchAuthWithPolicyParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SearchAuthWithPolicyBadRequestBody search auth with policy bad request body
//
// swagger:model SearchAuthWithPolicyBadRequestBody
type SearchAuthWithPolicyBadRequestBody struct {

	// id
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this search auth with policy bad request body
func (o *SearchAuthWithPolicyBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search auth with policy bad request body based on context it is used
func (o *SearchAuthWithPolicyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchAuthWithPolicyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchAuthWithPolicyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SearchAuthWithPolicyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchAuthWithPolicyInternalServerErrorBody search auth with policy internal server error body
//
// swagger:model SearchAuthWithPolicyInternalServerErrorBody
type SearchAuthWithPolicyInternalServerErrorBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this search auth with policy internal server error body
func (o *SearchAuthWithPolicyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search auth with policy internal server error body based on context it is used
func (o *SearchAuthWithPolicyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchAuthWithPolicyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchAuthWithPolicyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res SearchAuthWithPolicyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchAuthWithPolicyOKBody search auth with policy o k body
//
// swagger:model SearchAuthWithPolicyOKBody
type SearchAuthWithPolicyOKBody struct {

	// The auth roles that have the policy
	GroupNames map[string][]interface{} `json:"groupNames,omitempty"`
}

// Validate validates this search auth with policy o k body
func (o *SearchAuthWithPolicyOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search auth with policy o k body based on context it is used
func (o *SearchAuthWithPolicyOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchAuthWithPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchAuthWithPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res SearchAuthWithPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchAuthWithPolicyUnauthorizedBody search auth with policy unauthorized body
//
// swagger:model SearchAuthWithPolicyUnauthorizedBody
type SearchAuthWithPolicyUnauthorizedBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this search auth with policy unauthorized body
func (o *SearchAuthWithPolicyUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search auth with policy unauthorized body based on context it is used
func (o *SearchAuthWithPolicyUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchAuthWithPolicyUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchAuthWithPolicyUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchAuthWithPolicyUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
