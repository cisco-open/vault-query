// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetPolicyByNameParams creates a new GetPolicyByNameParams object
//
// There are no default values defined in the spec.
func NewGetPolicyByNameParams() GetPolicyByNameParams {

	return GetPolicyByNameParams{}
}

// GetPolicyByNameParams contains all the bound params for the get policy by name operation
// typically these are obtained from a http.Request
//
// swagger:parameters getPolicyByName
type GetPolicyByNameParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*namespace of the policy
	  In: query
	*/
	Namespace *string
	/*name of the policy
	  Required: true
	  In: path
	*/
	PolicyName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPolicyByNameParams() beforehand.
func (o *GetPolicyByNameParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	rPolicyName, rhkPolicyName, _ := route.Params.GetOK("policyName")
	if err := o.bindPolicyName(rPolicyName, rhkPolicyName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *GetPolicyByNameParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Namespace = &raw

	return nil
}

// bindPolicyName binds and validates parameter PolicyName from path.
func (o *GetPolicyByNameParams) bindPolicyName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.PolicyName = raw

	return nil
}
