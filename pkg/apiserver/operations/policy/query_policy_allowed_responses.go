// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"vaultquery/models"
)

// QueryPolicyAllowedOKCode is the HTTP code returned for type QueryPolicyAllowedOK
const QueryPolicyAllowedOKCode int = 200

/*
QueryPolicyAllowedOK Successful query

swagger:response queryPolicyAllowedOK
*/
type QueryPolicyAllowedOK struct {

	/*
	  In: Body
	*/
	Payload *models.Response `json:"body,omitempty"`
}

// NewQueryPolicyAllowedOK creates QueryPolicyAllowedOK with default headers values
func NewQueryPolicyAllowedOK() *QueryPolicyAllowedOK {

	return &QueryPolicyAllowedOK{}
}

// WithPayload adds the payload to the query policy allowed o k response
func (o *QueryPolicyAllowedOK) WithPayload(payload *models.Response) *QueryPolicyAllowedOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query policy allowed o k response
func (o *QueryPolicyAllowedOK) SetPayload(payload *models.Response) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryPolicyAllowedOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryPolicyAllowedBadRequestCode is the HTTP code returned for type QueryPolicyAllowedBadRequest
const QueryPolicyAllowedBadRequestCode int = 400

/*
QueryPolicyAllowedBadRequest Bad request

swagger:response queryPolicyAllowedBadRequest
*/
type QueryPolicyAllowedBadRequest struct {

	/*
	  In: Body
	*/
	Payload *QueryPolicyAllowedBadRequestBody `json:"body,omitempty"`
}

// NewQueryPolicyAllowedBadRequest creates QueryPolicyAllowedBadRequest with default headers values
func NewQueryPolicyAllowedBadRequest() *QueryPolicyAllowedBadRequest {

	return &QueryPolicyAllowedBadRequest{}
}

// WithPayload adds the payload to the query policy allowed bad request response
func (o *QueryPolicyAllowedBadRequest) WithPayload(payload *QueryPolicyAllowedBadRequestBody) *QueryPolicyAllowedBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query policy allowed bad request response
func (o *QueryPolicyAllowedBadRequest) SetPayload(payload *QueryPolicyAllowedBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryPolicyAllowedBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryPolicyAllowedUnauthorizedCode is the HTTP code returned for type QueryPolicyAllowedUnauthorized
const QueryPolicyAllowedUnauthorizedCode int = 401

/*
QueryPolicyAllowedUnauthorized Token accessor invalid/not enough permissions

swagger:response queryPolicyAllowedUnauthorized
*/
type QueryPolicyAllowedUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *QueryPolicyAllowedUnauthorizedBody `json:"body,omitempty"`
}

// NewQueryPolicyAllowedUnauthorized creates QueryPolicyAllowedUnauthorized with default headers values
func NewQueryPolicyAllowedUnauthorized() *QueryPolicyAllowedUnauthorized {

	return &QueryPolicyAllowedUnauthorized{}
}

// WithPayload adds the payload to the query policy allowed unauthorized response
func (o *QueryPolicyAllowedUnauthorized) WithPayload(payload *QueryPolicyAllowedUnauthorizedBody) *QueryPolicyAllowedUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query policy allowed unauthorized response
func (o *QueryPolicyAllowedUnauthorized) SetPayload(payload *QueryPolicyAllowedUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryPolicyAllowedUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// QueryPolicyAllowedInternalServerErrorCode is the HTTP code returned for type QueryPolicyAllowedInternalServerError
const QueryPolicyAllowedInternalServerErrorCode int = 500

/*
QueryPolicyAllowedInternalServerError Internal error processing request

swagger:response queryPolicyAllowedInternalServerError
*/
type QueryPolicyAllowedInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *QueryPolicyAllowedInternalServerErrorBody `json:"body,omitempty"`
}

// NewQueryPolicyAllowedInternalServerError creates QueryPolicyAllowedInternalServerError with default headers values
func NewQueryPolicyAllowedInternalServerError() *QueryPolicyAllowedInternalServerError {

	return &QueryPolicyAllowedInternalServerError{}
}

// WithPayload adds the payload to the query policy allowed internal server error response
func (o *QueryPolicyAllowedInternalServerError) WithPayload(payload *QueryPolicyAllowedInternalServerErrorBody) *QueryPolicyAllowedInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the query policy allowed internal server error response
func (o *QueryPolicyAllowedInternalServerError) SetPayload(payload *QueryPolicyAllowedInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *QueryPolicyAllowedInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
