// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"vaultquery/models"
)

// SearchPolicyHandlerFunc turns a function with the right signature into a search policy handler
type SearchPolicyHandlerFunc func(SearchPolicyParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchPolicyHandlerFunc) Handle(params SearchPolicyParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SearchPolicyHandler interface for that can handle valid search policy params
type SearchPolicyHandler interface {
	Handle(SearchPolicyParams, interface{}) middleware.Responder
}

// NewSearchPolicy creates a new http.Handler for the search policy operation
func NewSearchPolicy(ctx *middleware.Context, handler SearchPolicyHandler) *SearchPolicy {
	return &SearchPolicy{Context: ctx, Handler: handler}
}

/*
	SearchPolicy swagger:route POST /policy/search policy searchPolicy

Search which policy allow an operation on a vault path
*/
type SearchPolicy struct {
	Context *middleware.Context
	Handler SearchPolicyHandler
}

func (o *SearchPolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchPolicyParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SearchPolicyBadRequestBody search policy bad request body
//
// swagger:model SearchPolicyBadRequestBody
type SearchPolicyBadRequestBody struct {

	// id
	ID string `json:"id,omitempty"`

	// Human readable messages from the server
	Messages []*models.Message `json:"messages"`
}

// Validate validates this search policy bad request body
func (o *SearchPolicyBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPolicyBadRequestBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	for i := 0; i < len(o.Messages); i++ {
		if swag.IsZero(o.Messages[i]) { // not required
			continue
		}

		if o.Messages[i] != nil {
			if err := o.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search policy bad request body based on the context it is used
func (o *SearchPolicyBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPolicyBadRequestBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Messages); i++ {

		if o.Messages[i] != nil {
			if err := o.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchPolicyBadRequest" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchPolicyBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPolicyBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SearchPolicyBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchPolicyBody search policy body
//
// swagger:model SearchPolicyBody
type SearchPolicyBody struct {

	// path details
	PathDetails *SearchPolicyParamsBodyPathDetails `json:"pathDetails,omitempty"`
}

// Validate validates this search policy body
func (o *SearchPolicyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePathDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPolicyBody) validatePathDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.PathDetails) { // not required
		return nil
	}

	if o.PathDetails != nil {
		if err := o.PathDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pathDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pathDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this search policy body based on the context it is used
func (o *SearchPolicyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePathDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPolicyBody) contextValidatePathDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.PathDetails != nil {
		if err := o.PathDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "pathDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "pathDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchPolicyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPolicyBody) UnmarshalBinary(b []byte) error {
	var res SearchPolicyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchPolicyInternalServerErrorBody search policy internal server error body
//
// swagger:model SearchPolicyInternalServerErrorBody
type SearchPolicyInternalServerErrorBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this search policy internal server error body
func (o *SearchPolicyInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search policy internal server error body based on context it is used
func (o *SearchPolicyInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPolicyInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPolicyInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res SearchPolicyInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchPolicyOKBody search policy o k body
//
// swagger:model SearchPolicyOKBody
type SearchPolicyOKBody struct {

	// denying policy segments
	DenyingPolicySegments map[string]map[string][]models.PolicySegment `json:"denyingPolicySegments,omitempty"`

	// granting policy segments
	GrantingPolicySegments map[string]map[string][]models.PolicySegment `json:"grantingPolicySegments,omitempty"`

	// Human readable messages from the server
	Messages []*models.Message `json:"messages"`
}

// Validate validates this search policy o k body
func (o *SearchPolicyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDenyingPolicySegments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGrantingPolicySegments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPolicyOKBody) validateDenyingPolicySegments(formats strfmt.Registry) error {
	if swag.IsZero(o.DenyingPolicySegments) { // not required
		return nil
	}

	for k := range o.DenyingPolicySegments {

		for kk := range o.DenyingPolicySegments[k] {

			if err := validate.Required("searchPolicyOK"+"."+"denyingPolicySegments"+"."+k+"."+kk, "body", o.DenyingPolicySegments[k][kk]); err != nil {
				return err
			}

			for i := 0; i < len(o.DenyingPolicySegments[k][kk]); i++ {

				if err := o.DenyingPolicySegments[k][kk][i].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("searchPolicyOK" + "." + "denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("searchPolicyOK" + "." + "denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (o *SearchPolicyOKBody) validateGrantingPolicySegments(formats strfmt.Registry) error {
	if swag.IsZero(o.GrantingPolicySegments) { // not required
		return nil
	}

	for k := range o.GrantingPolicySegments {

		for kk := range o.GrantingPolicySegments[k] {

			if err := validate.Required("searchPolicyOK"+"."+"grantingPolicySegments"+"."+k+"."+kk, "body", o.GrantingPolicySegments[k][kk]); err != nil {
				return err
			}

			for i := 0; i < len(o.GrantingPolicySegments[k][kk]); i++ {

				if err := o.GrantingPolicySegments[k][kk][i].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("searchPolicyOK" + "." + "grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("searchPolicyOK" + "." + "grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (o *SearchPolicyOKBody) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	for i := 0; i < len(o.Messages); i++ {
		if swag.IsZero(o.Messages[i]) { // not required
			continue
		}

		if o.Messages[i] != nil {
			if err := o.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search policy o k body based on the context it is used
func (o *SearchPolicyOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDenyingPolicySegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGrantingPolicySegments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchPolicyOKBody) contextValidateDenyingPolicySegments(ctx context.Context, formats strfmt.Registry) error {

	for k := range o.DenyingPolicySegments {

		for kk := range o.DenyingPolicySegments[k] {

			for i := 0; i < len(o.DenyingPolicySegments[k][kk]); i++ {

				if err := o.DenyingPolicySegments[k][kk][i].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("searchPolicyOK" + "." + "denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("searchPolicyOK" + "." + "denyingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (o *SearchPolicyOKBody) contextValidateGrantingPolicySegments(ctx context.Context, formats strfmt.Registry) error {

	for k := range o.GrantingPolicySegments {

		for kk := range o.GrantingPolicySegments[k] {

			for i := 0; i < len(o.GrantingPolicySegments[k][kk]); i++ {

				if err := o.GrantingPolicySegments[k][kk][i].ContextValidate(ctx, formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("searchPolicyOK" + "." + "grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("searchPolicyOK" + "." + "grantingPolicySegments" + "." + k + "." + kk + "." + strconv.Itoa(i))
					}
					return err
				}

			}

		}

	}

	return nil
}

func (o *SearchPolicyOKBody) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Messages); i++ {

		if o.Messages[i] != nil {
			if err := o.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchPolicyOK" + "." + "messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res SearchPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchPolicyParamsBodyPathDetails search policy params body path details
//
// swagger:model SearchPolicyParamsBodyPathDetails
type SearchPolicyParamsBodyPathDetails struct {

	// The namespace in which the path/query occurs
	// Example: meetpaas/mccdev
	Namespace string `json:"namespace,omitempty"`

	// The HTTP operation for the pqth
	// Example: create
	// Enum: [create read update patch delete list help alias-lookahead resolve-role revoke renew rollback]
	Op string `json:"op,omitempty"`

	// The vault path for the query
	// Example: secret/data/foo/bar
	Path string `json:"path,omitempty"`
}

// Validate validates this search policy params body path details
func (o *SearchPolicyParamsBodyPathDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchPolicyParamsBodyPathDetailsTypeOpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","read","update","patch","delete","list","help","alias-lookahead","resolve-role","revoke","renew","rollback"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchPolicyParamsBodyPathDetailsTypeOpPropEnum = append(searchPolicyParamsBodyPathDetailsTypeOpPropEnum, v)
	}
}

const (

	// SearchPolicyParamsBodyPathDetailsOpCreate captures enum value "create"
	SearchPolicyParamsBodyPathDetailsOpCreate string = "create"

	// SearchPolicyParamsBodyPathDetailsOpRead captures enum value "read"
	SearchPolicyParamsBodyPathDetailsOpRead string = "read"

	// SearchPolicyParamsBodyPathDetailsOpUpdate captures enum value "update"
	SearchPolicyParamsBodyPathDetailsOpUpdate string = "update"

	// SearchPolicyParamsBodyPathDetailsOpPatch captures enum value "patch"
	SearchPolicyParamsBodyPathDetailsOpPatch string = "patch"

	// SearchPolicyParamsBodyPathDetailsOpDelete captures enum value "delete"
	SearchPolicyParamsBodyPathDetailsOpDelete string = "delete"

	// SearchPolicyParamsBodyPathDetailsOpList captures enum value "list"
	SearchPolicyParamsBodyPathDetailsOpList string = "list"

	// SearchPolicyParamsBodyPathDetailsOpHelp captures enum value "help"
	SearchPolicyParamsBodyPathDetailsOpHelp string = "help"

	// SearchPolicyParamsBodyPathDetailsOpAliasDashLookahead captures enum value "alias-lookahead"
	SearchPolicyParamsBodyPathDetailsOpAliasDashLookahead string = "alias-lookahead"

	// SearchPolicyParamsBodyPathDetailsOpResolveDashRole captures enum value "resolve-role"
	SearchPolicyParamsBodyPathDetailsOpResolveDashRole string = "resolve-role"

	// SearchPolicyParamsBodyPathDetailsOpRevoke captures enum value "revoke"
	SearchPolicyParamsBodyPathDetailsOpRevoke string = "revoke"

	// SearchPolicyParamsBodyPathDetailsOpRenew captures enum value "renew"
	SearchPolicyParamsBodyPathDetailsOpRenew string = "renew"

	// SearchPolicyParamsBodyPathDetailsOpRollback captures enum value "rollback"
	SearchPolicyParamsBodyPathDetailsOpRollback string = "rollback"
)

// prop value enum
func (o *SearchPolicyParamsBodyPathDetails) validateOpEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchPolicyParamsBodyPathDetailsTypeOpPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchPolicyParamsBodyPathDetails) validateOp(formats strfmt.Registry) error {
	if swag.IsZero(o.Op) { // not required
		return nil
	}

	// value enum
	if err := o.validateOpEnum("body"+"."+"pathDetails"+"."+"op", "body", o.Op); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search policy params body path details based on context it is used
func (o *SearchPolicyParamsBodyPathDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPolicyParamsBodyPathDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPolicyParamsBodyPathDetails) UnmarshalBinary(b []byte) error {
	var res SearchPolicyParamsBodyPathDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchPolicyUnauthorizedBody search policy unauthorized body
//
// swagger:model SearchPolicyUnauthorizedBody
type SearchPolicyUnauthorizedBody struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this search policy unauthorized body
func (o *SearchPolicyUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search policy unauthorized body based on context it is used
func (o *SearchPolicyUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchPolicyUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchPolicyUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res SearchPolicyUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
